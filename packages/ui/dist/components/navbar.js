import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import { Menu, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { NavigationMenu, NavigationMenuContent, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, navigationMenuTriggerStyle, } from "@/components/ui/navigation-menu";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
const Navbar = React.forwardRef(({ items = [], logo, actions, className }, ref) => {
    const [isOpen, setIsOpen] = React.useState(false);
    return (_jsxs("header", { ref: ref, className: cn("sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60", className), children: [_jsxs("div", { className: "container flex h-14 items-center", children: [_jsx("div", { className: "mr-4 flex", children: logo && _jsx("div", { className: "mr-6 flex items-center space-x-2", children: logo }) }), _jsx("div", { className: "hidden md:flex", children: _jsx(NavigationMenu, { children: _jsx(NavigationMenuList, { children: items.map((item, index) => (_jsx(NavigationMenuItem, { children: item.items ? (_jsxs(_Fragment, { children: [_jsx(NavigationMenuTrigger, { children: item.title }), _jsx(NavigationMenuContent, { children: _jsx("ul", { className: "grid gap-3 p-6 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]", children: item.items.map((subItem, subIndex) => (_jsx("li", { children: _jsx(NavigationMenuLink, { asChild: true, children: _jsxs("a", { className: "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground", href: subItem.href, children: [_jsx("div", { className: "text-sm font-medium leading-none", children: subItem.title }), subItem.description && (_jsx("p", { className: "line-clamp-2 text-sm leading-snug text-muted-foreground", children: subItem.description }))] }) }) }, subIndex))) }) })] })) : (_jsx(NavigationMenuLink, { className: navigationMenuTriggerStyle(), href: item.href, children: item.title })) }, index))) }) }) }), _jsx(Button, { variant: "ghost", size: "icon", className: "md:hidden ml-auto", onClick: () => setIsOpen(!isOpen), "aria-label": "Toggle menu", children: isOpen ? _jsx(X, { className: "h-4 w-4" }) : _jsx(Menu, { className: "h-4 w-4" }) }), actions && _jsx("div", { className: "ml-auto hidden md:flex", children: actions })] }), isOpen && (_jsx("div", { className: "border-t md:hidden", children: _jsx("div", { className: "container py-4", children: _jsxs("nav", { className: "flex flex-col space-y-3", children: [items.map((item, index) => (_jsxs("div", { children: [_jsx("a", { href: item.href, className: "text-sm font-medium transition-colors hover:text-primary", onClick: () => setIsOpen(false), children: item.title }), item.items && (_jsx("div", { className: "ml-4 mt-2 space-y-2", children: item.items.map((subItem, subIndex) => (_jsx("a", { href: subItem.href, className: "block text-sm text-muted-foreground transition-colors hover:text-primary", onClick: () => setIsOpen(false), children: subItem.title }, subIndex))) }))] }, index))), actions && (_jsxs(_Fragment, { children: [_jsx(Separator, { className: "my-2" }), _jsx("div", { className: "flex flex-col space-y-2", children: actions })] }))] }) }) }))] }));
});
Navbar.displayName = "Navbar";
export { Navbar };
//# sourceMappingURL=navbar.js.map